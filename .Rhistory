# Fill the return vector with as many o_1, o_2,..., o_n as possible
lapply(ind_o, function(i) {
if(sum(w[best > 0]) < W){
best[i] <<- floor((W - w[i] - sum(w[best > 0])) / w[i])
}
})
res <- list(value=sum(v[best > 0]), elements=which(best > 0))
return(res)
}
greedy_knapsack(x = knapsack_objects[1:1200,], W = 2000)
hej <- sort(c(92, 574, 472, 80, 110, 840, 537, 1000, 332, 117, 37, 1197, 1152,  947, 904, 776, 577, 288, 1147, 1131,  234,  255, 1006,  833, 1176, 1092,  873,  828,1059,  500, 1090,  794, 1033))
all(asd == hej)
greedy_knapsack <- function(x,W) {
n <- length(x[[1]])
v <- x$v
w <- x$w
best <- replicate(n,0)
# Sort vector o by v_i/w_i
ind_o <- order(v / w,decreasing=TRUE)
# Fill the return vector with as many o_1, o_2,..., o_n as possible
lapply(ind_o, function(i) {
if(sum(w[best > 0]) < W){
best[i] <<- floor((W - w[i] - sum(w[best > 0])) / w[i])
}
})
res <- list(value=sum(v[best > 0]), elements=which(best > 0))
return(res)
}
asd <- greedy_knapsack(x = knapsack_objects[1:1200,], W = 2000)
all(asd == hej)
asd$elements
greedy_knapsack <- function(x,W) {
n <- length(x[[1]])
v <- x$v
w <- x$w
best <- replicate(n,0)
# Sort vector o by v_i/w_i
ind_o <- order(v / w,decreasing=TRUE)
# Fill the return vector with as many o_1, o_2,..., o_n as possible
lapply(ind_o, function(i) {
if(sum(w[best > 0]) < W){
best[i] <<- (W - w[i] - sum(w[best > 0])) / w[i]
}
})
res <- list(value=sum(v[best > 0]), elements=which(best > 0))
return(res)
}
asd <- greedy_knapsack(x = knapsack_objects[1:1200,], W = 2000)
asd$elements
all(asd == hej)
hej <- sort(c(92, 574, 472, 80, 110, 840, 537, 1000, 332, 117, 37, 1197, 1152,  947, 904, 776, 577, 288, 1147, 1131,  234,  255, 1006,  833, 1176, 1092,  873,  828,1059,  500, 1090,  794, 1033))
all(asd == hej)
hej
greedy_knapsack <- function(x,W) {
n <- length(x[[1]])
v <- x$v
w <- x$w
best <- replicate(n,0)
# Sort vector o by v_i/w_i
ind_o <- order(v / w,decreasing=TRUE)
# Fill the return vector with as many o_1, o_2,..., o_n as possible
lapply(ind_o, function(i) {
if(sum(w[best > 0]) < W){
best[i] <<- (W - w[i] - sum(w[best > 0])) / w[i]
}
})
res <- list(value=sum(v[best > 0]), elements=which(best > 0))
return(res)
}
asd <- greedy_knapsack(x = knapsack_objects[1:1200,], W = 2000)
asd
greedy_knapsack <- function(x,W) {
n <- length(x[[1]])
v <- x$v
w <- x$w
best <- replicate(n,0)
# Sort vector o by v_i/w_i
ind_o <- order(v / w,decreasing=TRUE)
# Fill the return vector with as many o_1, o_2,..., o_n as possible
lapply(ind_o, function(i) {
if(sum(w[best > 0]) < W){
best[i] <<- round((W - w[i] - sum(w[best > 0])) / w[i])
}
})
res <- list(value=sum(v[best > 0]), elements=which(best > 0))
return(res)
}
asd <- greedy_knapsack(x = knapsack_objects[1:1200,], W = 2000)
asd$elements
greedy_knapsack <- function(x,W) {
n <- length(x[[1]])
v <- x$v
w <- x$w
best <- replicate(n,0)
# Sort vector o by v_i/w_i
ind_o <- order(v / w,decreasing=TRUE)
# Fill the return vector with as many o_1, o_2,..., o_n as possible
lapply(ind_o, function(i) {
if(sum(w[best > 0]) < W){
best[i] <<- (W - w[i] - sum(w[best > 0])) / w[i]
}
})
res <- list(value=sum(v[best > 0]), elements=which(best > 0))
return(res)
}
asd <- greedy_knapsack(x = knapsack_objects[1:1200,], W = 2000)
all(asd$elements == hej)
hej <- sort(c(92, 574, 472, 80, 110, 840, 537, 1000, 332, 117, 37, 1197, 1152,  947, 904, 776, 577, 288, 1147, 1131,  234,  255, 1006,  833, 1176, 1092,  873,  828,1059,  500, 1090,  794, 1033))
all(asd$elements == hej)
asd$elements
hej
greedy_knapsack <- function(x,W) {
n <- length(x[[1]])
v <- x$v
w <- x$w
best <- replicate(n,0)
# Sort vector o by v_i/w_i
ind_o <- order(v / w,decreasing=TRUE)
# Fill the return vector with as many o_1, o_2,..., o_n as possible
lapply(ind_o, function(i) {
if(sum(w[best > 0]) <= W){
best[i] <<- (W - w[i] - sum(w[best > 0])) / w[i]
}
})
res <- list(value=sum(v[best > 0]), elements=which(best > 0))
return(res)
}
asd <- greedy_knapsack(x = knapsack_objects[1:1200,], W = 2000)
asd$elements
hej
asd
greedy_knapsack <- function(x,W) {
n <- length(x[[1]])
v <- x$v
w <- x$w
best <- replicate(n,0)
# Sort vector o by v_i/w_i
ind_o <- order(v / w,decreasing=TRUE)
# Fill the return vector with as many o_1, o_2,..., o_n as possible
lapply(ind_o, function(i) {
if(sum(w[best > 0]) <= W){
best[i] <<- round((W - w[i] - sum(w[best > 0])) / w[i])
}
})
res <- list(value=sum(v[best > 0]), elements=which(best > 0))
return(res)
}
asd <- greedy_knapsack(x = knapsack_objects[1:1200,], W = 2000)
asd
greedy_knapsack <- function(x,W) {
n <- length(x[[1]])
v <- x$v
w <- x$w
best <- replicate(n,0)
# Sort vector o by v_i/w_i
ind_o <- order(v / w,decreasing=TRUE)
# Fill the return vector with as many o_1, o_2,..., o_n as possible
lapply(ind_o, function(i) {
if(sum(w[best > 0]) <= W){
best[i] <<- round((W - w[i] - sum(w[best > 0])) / w[i])
}
})
res <- list(value=sum(v[best > 0]), elements=which(best > 0), best=best)
return(res)
}
asd <- greedy_knapsack(x = knapsack_objects[1:1200,], W = 2000)
asd
greedy_knapsack <- function(x,W) {
n <- length(x[[1]])
v <- x$v
w <- x$w
best <- replicate(n,0)
# Sort vector o by v_i/w_i
ind_o <- order(v / w,decreasing=TRUE)
# Fill the return vector with as many o_1, o_2,..., o_n as possible
lapply(ind_o, function(i) {
if(sum(w[best > 0]) <= W){
best[i] <<- round((W - w[i] - sum(w[best > 0])) / w[i])
}
})
res <- list(value=sum(v[best > 0]), elements=which(best > 0), best=best)
return(res)
}
asd <- greedy_knapsack(x = knapsack_objects[1:12,], W = 2000)
asd
best <- replicate(n,0)
n <- length(x[[1]])
best <- replicate(n,0)
v <- x$v
w <- x$w
best <- replicate(n,0)
best
sum(w[best > 0])
asd <- greedy_knapsack(x = knapsack_objects[1:12,], W = 2000)
best <- asd$best
sum(w[best > 0])
greedy_knapsack <- function(x,W) {
n <- length(x[[1]])
v <- x$v
w <- x$w
best <- replicate(n,0)
# Sort vector o by v_i/w_i
ind_o <- order(v / w,decreasing=TRUE)
# Fill the return vector with as many o_1, o_2,..., o_n as possible
lapply(ind_o, function(i) {
if(sum(w[best > 0]) < W){
best[i] <<- round((W - w[i] - sum(w[best > 0])) / w[i])
}
})
res <- list(value=sum(v[best > 0]), elements=which(best > 0), best=best)
return(res)
}
asd <- greedy_knapsack(x = knapsack_objects[1:12,], W = 2000)
asd
?round
greedy_knapsack <- function(x,W) {
n <- length(x[[1]])
v <- x$v
w <- x$w
best <- replicate(n,0)
# Sort vector o by v_i/w_i
ind_o <- order(v / w,decreasing=TRUE)
# Fill the return vector with as many o_1, o_2,..., o_n as possible
lapply(ind_o, function(i) {
if(sum(w[best > 0]) < W & round((W - w[i] - sum(w[best > 0])) / w[i]) > 0){
best[i] <<- round((W - w[i] - sum(w[best > 0])) / w[i])
}
})
res <- list(value=sum(v[best > 0]), elements=which(best > 0), best=best)
return(res)
}
asd <- greedy_knapsack(x = knapsack_objects[1:12,], W = 2000)
asd
greedy_knapsack <- function(x,W) {
n <- length(x[[1]])
v <- x$v
w <- x$w
best <- replicate(n,0)
# Sort vector o by v_i/w_i
ind_o <- order(v / w,decreasing=TRUE)
# Fill the return vector with as many o_1, o_2,..., o_n as possible
lapply(ind_o, function(i) {
if(sum(w[best > 0]) < W & round((W - w[i] - sum(w[best > 0])) / w[i]) > 0){
best[i] <<- (W - w[i] - sum(w[best > 0])) / w[i]
}
})
res <- list(value=sum(v[best > 0]), elements=which(best > 0), best=best)
return(res)
}
asd <- greedy_knapsack(x = knapsack_objects[1:12,], W = 2000)
asd
greedy_knapsack <- function(x,W) {
n <- length(x[[1]])
v <- x$v
w <- x$w
best <- replicate(n,0)
# Sort vector o by v_i/w_i
ind_o <- order(v / w,decreasing=TRUE)
# Fill the return vector with as many o_1, o_2,..., o_n as possible
lapply(ind_o, function(i) {
if(sum(w[best > 0]) <= W & round((W - w[i] - sum(w[best > 0])) / w[i]) > 0){
best[i] <<- (W - w[i] - sum(w[best > 0])) / w[i]
}
})
res <- list(value=sum(v[best > 0]), elements=which(best > 0), best=best)
return(res)
}
asd <- greedy_knapsack(x = knapsack_objects[1:12,], W = 2000)
asd
greedy_knapsack <- function(x,W) {
n <- length(x[[1]])
v <- x$v
w <- x$w
best <- replicate(n,0)
# Sort vector o by v_i/w_i
ind_o <- order(v / w,decreasing=TRUE)
# Fill the return vector with as many o_1, o_2,..., o_n as possible
lapply(ind_o, function(i) {
if(sum(w[best > 0]) <= W & floor((W - w[i] - sum(w[best > 0])) / w[i]) > 0){
best[i] <<- floor((W - w[i] - sum(w[best > 0])) / w[i])
}
})
res <- list(value=sum(v[best > 0]), elements=which(best > 0), best=best)
return(res)
}
asd <- greedy_knapsack(x = knapsack_objects[1:12,], W = 2000)
asd
asd <- greedy_knapsack(x = knapsack_objects[1:1200,], W = 2000)
asd
all(asd$elements == hej)
hej <- sort(c(92, 574, 472, 80, 110, 840, 537, 1000, 332, 117, 37, 1197, 1152,  947, 904, 776, 577, 288, 1147, 1131,  234,  255, 1006,  833, 1176, 1092,  873,  828,1059,  500, 1090,  794, 1033))
all(asd$elements == hej)
asd$elements
greedy_knapsack <- function(x,W) {
n <- length(x[[1]])
v <- x$v
w <- x$w
best <- replicate(n,0)
# Sort vector o by v_i/w_i
ind_o <- order(v / w,decreasing=TRUE)
# Fill the return vector with as many o_1, o_2,..., o_n as possible
lapply(ind_o, function(i) {
if(floor((W - w[i] - sum(w[best > 0])) / w[i]) > 0){
best[i] <<- floor((W - w[i] - sum(w[best > 0])) / w[i])
}
})
res <- list(value=sum(v[best > 0]), elements=which(best > 0), best=best)
return(res)
}
asd <- greedy_knapsack(x = knapsack_objects[1:1200,], W = 2000)
asd$elements
asd$value
greedy_knapsack <- function(x,W) {
n <- length(x[[1]])
v <- x$v
w <- x$w
best <- replicate(n,0)
# Sort vector o by v_i/w_i
ind_o <- order(v / w,decreasing=TRUE)
# Fill the return vector with as many o_1, o_2,..., o_n as possible
lapply(ind_o, function(i) {
if((W - w[i] - sum(w[best > 0])) / w[i] > 0){
best[i] <<- (W - w[i] - sum(w[best > 0]) / w[i])
}
})
res <- list(value=sum(v[best > 0]), elements=which(best > 0), best=best)
return(res)
}
asd <- greedy_knapsack(x = knapsack_objects[1:1200,], W = 2000)
asd$value
greedy_knapsack <- function(x,W) {
n <- length(x[[1]])
v <- x$v
w <- x$w
best <- replicate(n,0)
# Sort vector o by v_i/w_i
ind_o <- order(v / w,decreasing=TRUE)
# Fill the return vector with as many o_1, o_2,..., o_n as possible
lapply(ind_o, function(i) {
# How many values we can squeeze into the knapsack
squeeze <- floor((W - w[i] - sum(w[best > 0])) / w[i])
if(squeeze > 0){
best[i] <<- squeeze
}
})
res <- list(value=sum(v[best > 0]), elements=which(best > 0), best=best)
return(res)
}
asd <- greedy_knapsack(x = knapsack_objects[1:1200,], W = 2000)
asd$value
all(asd$elements == hej)
greedy_knapsack <- function(x,W) {
n <- length(x[[1]])
v <- x$v
w <- x$w
best <- replicate(n,0)
# Sort vector o by v_i/w_i
ind_o <- order(v / w,decreasing=TRUE)
# Fill the return vector with as many o_1, o_2,..., o_n as possible
lapply(ind_o, function(i) {
# How many values we can squeeze into the knapsack
squeeze <- floor((W - w[i] - sum(w[best > 0])) / w[i])
if(squeeze > 0){
best[i] <<- squeeze
}
})
res <- list(value=sum(v[best > 0]), elements=which(best > 0), best=best)
return(res)
}
asd <- greedy_knapsack(x = knapsack_objects[1:1200,], W = 2000)
asd$value
asd$elements
ind_o <- order(v / w,decreasing=TRUE)
ind_o
v / w
greedy_knapsack <- function(x,W) {
n <- length(x[[1]])
v <- x$v
w <- x$w
best <- replicate(n,0)
# Sort vector o by v_i/w_i
ind_o <- order(v / w,decreasing=TRUE)
# Fill the return vector with as many o_1, o_2,..., o_n as possible
lapply(ind_o, function(i) {
# How many values we can squeeze into the knapsack
squeeze <- floor((W - w[i] - sum(w[best > 0])) / w[i])
print(squeeze)
if(squeeze > 0){
best[i] <<- squeeze
}
})
res <- list(value=sum(v[best > 0]), elements=which(best > 0), best=best)
return(res)
}
asd <- greedy_knapsack(x = knapsack_objects[1:1200,], W = 2000)
greedy_knapsack <- function(x,W) {
n <- length(x[[1]])
v <- x$v
w <- x$w
best <- replicate(n,0)
# Sort vector o by v_i/w_i
ind_o <- order(v / w,decreasing=TRUE)
# Fill the return vector with as many o_1, o_2,..., o_n as possible
lapply(ind_o, function(i) {
# How many values we can squeeze into the knapsack
squeeze <- floor((W - w[i] - sum(w[best > 0])) / w[i])
print(squeeze)
if(squeeze > 0) {
best[i] <<- squeeze
}
})
res <- list(value=sum(v[best > 0]), elements=which(best > 0), best=best)
return(res)
}
asd <- greedy_knapsack(x = knapsack_objects[1:1200,], W = 2000)
asd$elements
greedy_knapsack <- function(x,W) {
n <- length(x[[1]])
v <- x$v
w <- x$w
best <- replicate(n,0)
# Sort vector o by v_i/w_i
ind_o <- order(v / w,decreasing=TRUE)
# Fill the return vector with as many o_1, o_2,..., o_n as possible
lapply(ind_o, function(i) {
# How many values we can squeeze into the knapsack
squeeze <- floor((W - w[i] - sum(w[best > 0])) / w[i])
print(squeeze)
if(squeeze > 0) {
best[i] <<- squeeze
}
})
res <- list(value=sum(v[best > 0]), elements=which(best > 0), best=best)
return(res)
}
asd <- greedy_knapsack(x = knapsack_objects[1:12,], W = 2000)
asd$elements
asd$best
?system.time
brute_force_knapsack <- function(x,W, parallel = FALSE) {
n <- length(x[[1]])
l <- rep(list(0:1), n)
M <- matrix(unlist(expand.grid(l)), ncol = n)
v <- x$v
w <- x$w
best <- replicate(n,0)
# Checks each row of M if the weight is allowed
if(parallel){
res_vec <- mclapply(1:2^n, function(x, M, w, v, W) {
m <- M[x,]
if(sum(w[m == 1]) <= W) {
return(m)
}
}, M, w, v, W, mc.cores = detectCores())
# To reduce overhead - might just use max() and return pairs ^ (m, v[m])
res_vec <- Filter(Negate(is.null), res_vec)
lapply(res_vec, function(m) {
if (sum(v[m == 1]) >= sum(v[best == 1])) {
best <<- m
}
})
} else {
apply(M, 1, function(m) {
if (sum(v[m == 1]) >= sum(v[best == 1]) & sum(w[m == 1]) <= W) {
best <<- m
}
})
}
res <- list(value=sum(v[best == 1]), elements=which(best == 1), resVec=best)
return(res)
}
system.time(brute_force_knapsack(x = knapsack_objects[1:16, ], W = 3500, parallel = TRUE))
system.time(brute_force_knapsack(x = knapsack_objects[1:16,], W = 3500, parallel = FALSE))
system.time(brute_force_knapsack(x = knapsack_objects[1:16, ], W = 3500, parallel = TRUE))
system.time(brute_force_knapsack(x = knapsack_objects[1:16,], W = 3500, parallel = FALSE))
brute_force_knapsack <- function(x,W, parallel = FALSE) {
n <- length(x[[1]])
l <- rep(list(0:1), n)
M <- matrix(unlist(expand.grid(l)), ncol = n)
v <- x$v
w <- x$w
best <- replicate(n,0)
# Checks each row of M if the weight is allowed
if(parallel){
res_vec <- mclapply(1:2^n, function(x, M, w, v, W) {
m <- M[x,]
if(sum(w[m == 1]) <= W) {
return(m)
}
}, M, w, v, W, mc.cores = 4)
# To reduce overhead - might just use max() and return pairs ^ (m, v[m])
res_vec <- Filter(Negate(is.null), res_vec)
lapply(res_vec, function(m) {
if (sum(v[m == 1]) >= sum(v[best == 1])) {
best <<- m
}
})
} else {
apply(M, 1, function(m) {
if (sum(v[m == 1]) >= sum(v[best == 1]) & sum(w[m == 1]) <= W) {
best <<- m
}
})
}
res <- list(value=sum(v[best == 1]), elements=which(best == 1), resVec=best)
return(res)
}
system.time(brute_force_knapsack(x = knapsack_objects[1:16, ], W = 3500, parallel = TRUE))
system.time(brute_force_knapsack(x = knapsack_objects[1:16,], W = 3500, parallel = FALSE))
system.time(brute_force_knapsack(x = knapsack_objects[1:16, ], W = 3500, parallel = TRUE))
system.time(brute_force_knapsack(x = knapsack_objects[1:16,], W = 3500, parallel = FALSE))
library(lab6)
