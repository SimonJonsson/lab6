}
A[j] <- 1
print(A)
lapply(1:n, function(k) {
if (A[k] == 1) {
tempWeight <- tempWeight + w[k]
tempValue <- tempValue + v[k]
}
})
if(tempValue > bestValue & tempWeight < W) {
bestValue <- tempValue
bestWeight <- tempWeight
bestChoice <- A
}
})
return(bestChoice)
}
brute_force_knapsack(x = knapsack_objects[1:8,], W = 3500)
brute_force_knapsack <- function(x,W) {
l <- rep(list(0:1), n)
M <- matrix(unlist(expand.grid(l)), ncol = n)
M <- unique(M)
v <- x$v
w <- x$w
best <- replicate(n,0)
apply(M, 1, function(m) {
if(sum(v[m == 1]) > sum(v[best == 1]) && sum(w[m == 1]) <= W) {
best <<- m
}
best
})
}
brute_force_knapsack_old <- function(x, W) {
v <- x$v
w <- x$w
A <- replicate(n,0)
bestValue <- 0
bestWeight <- 0
bestChoice <- replicate(n, 0)
lapply(1:2^n, function(i) {
j <- n
tempWeight <- 0
tempValue <- 0
k <- 1
while((A[j] != 0) & (j > 0)) {
A[j] <- 0
j <- j - 1
}
A[j] <- 1
print(A)
lapply(1:n, function(k) {
if (A[k] == 1) {
tempWeight <- tempWeight + w[k]
tempValue <- tempValue + v[k]
}
})
if(tempValue > bestValue & tempWeight < W) {
bestValue <- tempValue
bestWeight <- tempWeight
bestChoice <- A
}
})
return(bestChoice)
}
brute_force_knapsack(x = knapsack_objects[1:8,], W = 3500)
brute_force_knapsack <- function(x,W) {
l <- rep(list(0:1), n)
M <- matrix(unlist(expand.grid(l)), ncol = n)
M <- unique(M)
v <- x$v
w <- x$w
best <- replicate(n,0)
apply(M, 1, function(m) {
if(sum(v[m == 1]) > sum(v[best == 1]) && sum(w[m == 1]) <= W) {
best <<- m
}
})
return(best)
}
brute_force_knapsack_old <- function(x, W) {
v <- x$v
w <- x$w
A <- replicate(n,0)
bestValue <- 0
bestWeight <- 0
bestChoice <- replicate(n, 0)
lapply(1:2^n, function(i) {
j <- n
tempWeight <- 0
tempValue <- 0
k <- 1
while((A[j] != 0) & (j > 0)) {
A[j] <- 0
j <- j - 1
}
A[j] <- 1
print(A)
lapply(1:n, function(k) {
if (A[k] == 1) {
tempWeight <- tempWeight + w[k]
tempValue <- tempValue + v[k]
}
})
if(tempValue > bestValue & tempWeight < W) {
bestValue <- tempValue
bestWeight <- tempWeight
bestChoice <- A
}
})
return(bestChoice)
}
brute_force_knapsack(x = knapsack_objects[1:8,], W = 3500)
brute_force_knapsack <- function(x,W) {
l <- rep(list(0:1), n)
M <- matrix(unlist(expand.grid(l)), ncol = n)
M <- unique(M)
v <- x$v
w <- x$w
best <- replicate(n,0)
apply(M, 1, function(m) {
if(sum(v[m == 1]) > sum(v[best == 1]) && sum(w[m == 1]) <= W) {
best <<- m
}
})
return(v[best == 1])
}
brute_force_knapsack_old <- function(x, W) {
v <- x$v
w <- x$w
A <- replicate(n,0)
bestValue <- 0
bestWeight <- 0
bestChoice <- replicate(n, 0)
lapply(1:2^n, function(i) {
j <- n
tempWeight <- 0
tempValue <- 0
k <- 1
while((A[j] != 0) & (j > 0)) {
A[j] <- 0
j <- j - 1
}
A[j] <- 1
print(A)
lapply(1:n, function(k) {
if (A[k] == 1) {
tempWeight <- tempWeight + w[k]
tempValue <- tempValue + v[k]
}
})
if(tempValue > bestValue & tempWeight < W) {
bestValue <- tempValue
bestWeight <- tempWeight
bestChoice <- A
}
})
return(bestChoice)
}
brute_force_knapsack(x = knapsack_objects[1:8,], W = 3500)
brute_force_knapsack <- function(x,W) {
l <- rep(list(0:1), n)
M <- matrix(unlist(expand.grid(l)), ncol = n)
M <- unique(M)
v <- x$v
w <- x$w
best <- replicate(n,0)
apply(M, 1, function(m) {
if(sum(v[m == 1]) > sum(v[best == 1]) && sum(w[m == 1]) <= W) {
best <<- m
}
})
return(sum(v[best == 1]))
}
brute_force_knapsack_old <- function(x, W) {
v <- x$v
w <- x$w
A <- replicate(n,0)
bestValue <- 0
bestWeight <- 0
bestChoice <- replicate(n, 0)
lapply(1:2^n, function(i) {
j <- n
tempWeight <- 0
tempValue <- 0
k <- 1
while((A[j] != 0) & (j > 0)) {
A[j] <- 0
j <- j - 1
}
A[j] <- 1
print(A)
lapply(1:n, function(k) {
if (A[k] == 1) {
tempWeight <- tempWeight + w[k]
tempValue <- tempValue + v[k]
}
})
if(tempValue > bestValue & tempWeight < W) {
bestValue <- tempValue
bestWeight <- tempWeight
bestChoice <- A
}
})
return(bestChoice)
}
brute_force_knapsack(x = knapsack_objects[1:8,], W = 3500)
brute_force_knapsack <- function(x,W) {
l <- rep(list(0:1), n)
M <- matrix(unlist(expand.grid(l)), ncol = n)
M <- unique(M)
v <- x$v
w <- x$w
best <- replicate(n,0)
apply(M, 1, function(m) {
if(sum(v[m == 1]) > sum(v[best == 1]) && sum(w[m == 1]) <= W) {
best <<- m
}
})
return(which(best == 1))
}
brute_force_knapsack_old <- function(x, W) {
v <- x$v
w <- x$w
A <- replicate(n,0)
bestValue <- 0
bestWeight <- 0
bestChoice <- replicate(n, 0)
lapply(1:2^n, function(i) {
j <- n
tempWeight <- 0
tempValue <- 0
k <- 1
while((A[j] != 0) & (j > 0)) {
A[j] <- 0
j <- j - 1
}
A[j] <- 1
print(A)
lapply(1:n, function(k) {
if (A[k] == 1) {
tempWeight <- tempWeight + w[k]
tempValue <- tempValue + v[k]
}
})
if(tempValue > bestValue & tempWeight < W) {
bestValue <- tempValue
bestWeight <- tempWeight
bestChoice <- A
}
})
return(bestChoice)
}
brute_force_knapsack(x = knapsack_objects[1:8,], W = 3500)
brute_force_knapsack <- function(x,W) {
l <- rep(list(0:1), n)
M <- matrix(unlist(expand.grid(l)), ncol = n)
M <- unique(M)
v <- x$v
w <- x$w
best <- replicate(n,0)
apply(M, 1, function(m) {
if(sum(v[m == 1]) > sum(v[best == 1]) && sum(w[m == 1]) <= W) {
best <<- m
}
})
res <- list(value=sum(v[best == 1]), elements=which(best == 1))
return(res)
}
brute_force_knapsack_old <- function(x, W) {
v <- x$v
w <- x$w
A <- replicate(n,0)
bestValue <- 0
bestWeight <- 0
bestChoice <- replicate(n, 0)
lapply(1:2^n, function(i) {
j <- n
tempWeight <- 0
tempValue <- 0
k <- 1
while((A[j] != 0) & (j > 0)) {
A[j] <- 0
j <- j - 1
}
A[j] <- 1
print(A)
lapply(1:n, function(k) {
if (A[k] == 1) {
tempWeight <- tempWeight + w[k]
tempValue <- tempValue + v[k]
}
})
if(tempValue > bestValue & tempWeight < W) {
bestValue <- tempValue
bestWeight <- tempWeight
bestChoice <- A
}
})
return(bestChoice)
}
brute_force_knapsack(x = knapsack_objects[1:8,], W = 3500)
brute_force_knapsack <- function(x,W) {
l <- rep(list(0:1), n)
M <- matrix(unlist(expand.grid(l)), ncol = n)
M <- unique(M)
v <- x$v
w <- x$w
best <- replicate(n,0)
apply(M, 1, function(m) {
if(sum(v[m == 1]) > sum(v[best == 1]) && sum(w[m == 1]) <= W) {
best <<- m
}
})
res <- list(value=sum(w[best == 1]), elements=which(best == 1))
return(res)
}
brute_force_knapsack_old <- function(x, W) {
v <- x$v
w <- x$w
A <- replicate(n,0)
bestValue <- 0
bestWeight <- 0
bestChoice <- replicate(n, 0)
lapply(1:2^n, function(i) {
j <- n
tempWeight <- 0
tempValue <- 0
k <- 1
while((A[j] != 0) & (j > 0)) {
A[j] <- 0
j <- j - 1
}
A[j] <- 1
print(A)
lapply(1:n, function(k) {
if (A[k] == 1) {
tempWeight <- tempWeight + w[k]
tempValue <- tempValue + v[k]
}
})
if(tempValue > bestValue & tempWeight < W) {
bestValue <- tempValue
bestWeight <- tempWeight
bestChoice <- A
}
})
return(bestChoice)
}
brute_force_knapsack(x = knapsack_objects[1:8,], W = 3500)
brute_force_knapsack <- function(x,W) {
l <- rep(list(0:1), n)
M <- matrix(unlist(expand.grid(l)), ncol = n)
M <- unique(M)
v <- x$v
w <- x$w
best <- replicate(n,0)
apply(M, 1, function(m) {
if(sum(v[m == 1]) > sum(v[best == 1]) && sum(w[m == 1]) <= W) {
best <<- m
}
})
res <- list(value=sum(v[best == 1]), elements=which(best == 1))
return(res)
}
brute_force_knapsack(x = knapsack_objects[1:8,], W = 3500)
set.seed(42)
n <- 8
knapsack_objects <-
data.frame(w = sample(1:4000, size = n, replace = TRUE),
v = runif(n = n, 0, 10000))
brute_force_knapsack <- function(x,W) {
l <- rep(list(0:1), n)
M <- matrix(unlist(expand.grid(l)), ncol = n)
M <- unique(M)
v <- x$v
w <- x$w
best <- replicate(n,0)
apply(M, 1, function(m) {
if(sum(v[m == 1]) > sum(v[best == 1]) && sum(w[m == 1]) <= W) {
best <<- m
}
})
res <- list(value=sum(v[best == 1]), elements=which(best == 1))
return(res)
}
brute_force_knapsack(x = knapsack_objects[1:8,], W = 3500)
set.seed(42)
n <- 12
knapsack_objects <-
data.frame(w = sample(1:4000, size = n, replace = TRUE),
v = runif(n = n, 0, 10000))
brute_force_knapsack <- function(x,W) {
l <- rep(list(0:1), n)
M <- matrix(unlist(expand.grid(l)), ncol = n)
M <- unique(M)
v <- x$v
w <- x$w
best <- replicate(n,0)
apply(M, 1, function(m) {
if(sum(v[m == 1]) > sum(v[best == 1]) && sum(w[m == 1]) <= W) {
best <<- m
}
})
res <- list(value=sum(v[best == 1]), elements=which(best == 1))
return(res)
}
brute_force_knapsack(x = knapsack_objects[1:8,], W = 3500)
y = knapsack_objects[1:8,]
length(y)
length(y[[1]])
set.seed(42)
m <- 8
knapsack_objects <-
data.frame(w = sample(1:4000, size = m, replace = TRUE),
v = runif(n = m, 0, 10000))
brute_force_knapsack <- function(x,W) {
n <- length(x[[1]])
l <- rep(list(0:1), n)
M <- matrix(unlist(expand.grid(l)), ncol = n)
M <- unique(M)
v <- x$v
w <- x$w
best <- replicate(n,0)
apply(M, 1, function(m) {
if(sum(v[m == 1]) > sum(v[best == 1]) && sum(w[m == 1]) <= W) {
best <<- m
}
})
res <- list(value=sum(v[best == 1]), elements=which(best == 1))
return(res)
}
brute_force_knapsack(x = knapsack_objects[1:8,], W = 3500)
brute_force_knapsack <- function(x,W) {
n <- length(x[[1]])
l <- rep(list(0:1), n)
M <- matrix(unlist(expand.grid(l)), ncol = n)
M <- unique(M)
v <- x$v
w <- x$w
best <- replicate(n,0)
apply(M, 1, function(m) {
if(sum(v[m == 1]) > sum(v[best == 1]) && sum(w[m == 1]) <= W) {
best <<- m
}
})
res <- list(value=sum(v[best == 1]), elements=which(best == 1), test=best)
return(res)
}
brute_force_knapsack(x = knapsack_objects[1:8,], W = 3500)
brute_force_knapsack <- function(x,W) {
n <- length(x[[1]])
l <- rep(list(0:1), n)
M <- matrix(unlist(expand.grid(l)), ncol = n)
M <- unique(M)
v <- x$v
w <- x$w
best <- replicate(n,0)
apply(M, 1, function(m) {
if(sum(v[m == 1]) > sum(v[best == 1]) && sum(w[m == 1]) <= W) {
best <<- m
}
})
res <- list(value=sum(v[best == 1]), elements=which(best == 1), resVec=best)
return(res)
}
brute_force_knapsack(x = knapsack_objects[1:8,], W = 3500)
set.seed(42)
m <- 8
knapsack_objects <-
data.frame(w = sample(1:4000, size = m, replace = TRUE),
v = runif(n = m, 0, 10000))
brute_force_knapsack <- function(x,W) {
n <- length(x[[1]])
l <- rep(list(0:1), n)
M <- matrix(unlist(expand.grid(l)), ncol = n)
M <- unique(M)
v <- x$v
w <- x$w
best <- replicate(n,0)
apply(M, 1, function(m) {
if(sum(v[m == 1]) > sum(v[best == 1]) && sum(w[m == 1]) <= W) {
best <<- m
}
})
res <- list(value=sum(v[best == 1]), elements=which(best == 1), resVec=best)
return(res)
}
brute_force_knapsack(x = knapsack_objects[1:m,], W = 3500)
set.seed(42)
m <- 12
knapsack_objects <-
data.frame(w = sample(1:4000, size = m, replace = TRUE),
v = runif(n = m, 0, 10000))
brute_force_knapsack <- function(x,W) {
n <- length(x[[1]])
l <- rep(list(0:1), n)
M <- matrix(unlist(expand.grid(l)), ncol = n)
M <- unique(M)
v <- x$v
w <- x$w
best <- replicate(n,0)
apply(M, 1, function(m) {
if(sum(v[m == 1]) > sum(v[best == 1]) && sum(w[m == 1]) <= W) {
best <<- m
}
})
res <- list(value=sum(v[best == 1]), elements=which(best == 1), resVec=best)
return(res)
}
brute_force_knapsack(x = knapsack_objects[1:m,], W = 3500)
library(lab6)
library(lab6)
